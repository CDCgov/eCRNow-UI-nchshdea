[{"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\index.js":"1","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\App.js":"2","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\serviceWorker.js":"3","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Layout\\Header\\Header.js":"4","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\Authorizations\\Authorizations.js":"5","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\ClientDetailsList\\ClientDetailsList.js":"6","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\ClientDetails\\ClientDetails.js":"7","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\HealthCareSettings\\HealthCareSettings.js":"8","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\HealthCareSettingsList\\HealthCareSettingsList.js":"9","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\KAR\\KAR.js":"10"},{"size":452,"mtime":1611293601000,"results":"11","hashOfConfig":"12"},{"size":3717,"mtime":1621250327805,"results":"13","hashOfConfig":"12"},{"size":4951,"mtime":1611293601000,"results":"14","hashOfConfig":"12"},{"size":1177,"mtime":1621243574125,"results":"15","hashOfConfig":"12"},{"size":15351,"mtime":1611293601000,"results":"16","hashOfConfig":"12"},{"size":4591,"mtime":1612255726015,"results":"17","hashOfConfig":"12"},{"size":44412,"mtime":1621064433298,"results":"18","hashOfConfig":"12"},{"size":29144,"mtime":1621256017636,"results":"19","hashOfConfig":"12"},{"size":4858,"mtime":1621252386481,"results":"20","hashOfConfig":"12"},{"size":11115,"mtime":1621268723685,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"13hv6of",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\index.js",[],["44","45"],"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\App.js",[],"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\serviceWorker.js",[],"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Layout\\Header\\Header.js",[],"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\Authorizations\\Authorizations.js",[],"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\ClientDetailsList\\ClientDetailsList.js",[],"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\ClientDetails\\ClientDetails.js",[],"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\HealthCareSettings\\HealthCareSettings.js",["46","47","48"],"import React, { Component } from 'react';\r\nimport {\r\n    Alert,\r\n    Row,\r\n    Col,\r\n    Form, Card, Accordion, Button,Table\r\n} from 'react-bootstrap';\r\nimport './HealthCareSettings.css';\r\nimport { store } from 'react-notifications-component';\r\nimport TextField from '@material-ui/core/TextField/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nclass HealthCareSettings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            validated: false,\r\n            isChecked: false,\r\n            karFhirServerURLList:[],\r\n            isKarFhirServerURLSelected:false,\r\n            selectedKARDetails:[]\r\n        };\r\n        this.selectedHealthCareSettings = this.props.selectedHealthCareSettings;\r\n        console.log(this.props.addNewHealthCare);\r\n        const propType = typeof this.props.addNewHealthCare;\r\n        if(propType === \"boolean\"){\r\n            this.addNewHealthCare = this.props.addNewHealthCare ? this.props.addNewHealthCare : false;\r\n        } else {\r\n            this.addNewHealthCare = this.props.addNewHealthCare ? this.props.addNewHealthCare.addNewHealthCare : false;\r\n        }\r\n        \r\n        console.log(this.addNewHealthCare);\r\n        console.log(this.selectedHealthCareSettings);\r\n        if (!this.addNewHealthCare && !this.isEmpty(this.selectedHealthCareSettings)) {\r\n          console.log(\"Inside If\")\r\n            this.state.authType = this.selectedHealthCareSettings.authType;\r\n            this.state.clientId = this.selectedHealthCareSettings.clientId;\r\n            this.state.clientSecret = this.selectedHealthCareSettings.clientSecret;\r\n            this.state.fhirServerBaseURL = this.selectedHealthCareSettings.fhirServerBaseURL;\r\n            this.state.tokenEndpoint = this.selectedHealthCareSettings.tokenURL;\r\n            this.state.scopes = this.selectedHealthCareSettings.scopes;\r\n            this.state.restAPIURL= this.selectedHealthCareSettings.restAPIURL;\r\n            this.state.startThreshold = this.selectedHealthCareSettings.encounterStartThreshold;\r\n            this.state.endThreshold = this.selectedHealthCareSettings.encounterEndThreshold;\r\n\r\n            this.getKARs();\r\n        } else {\r\n            this.state.authType = 'SofProvider';\r\n        }\r\n        this.state.isSaved = false;\r\n        this.saveHealthCareSettings = this.saveHealthCareSettings.bind(this);\r\n        this.handleRadioChange = this.handleRadioChange.bind(this);\r\n        this.handleDirectChange = this.handleDirectChange.bind(this);\r\n        this.handleReportChange = this.handleReportChange.bind(this);\r\n        this.openHealthCareSettingsList = this.openHealthCareSettingsList.bind(this);\r\n        this.openKAR = this.openKAR.bind(this);\r\n    }\r\n\r\n    getKARs(){\r\n        console.log(\"clicked\");\r\n        fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/kars/\", {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    return response.json();\r\n                } else {\r\n                    const errorMessage = response.json();\r\n                    console.log(errorMessage);\r\n                    store.addNotification({\r\n                        title: '' + response.status + '',\r\n                        message: 'Error in fetching the KARs',\r\n                        type: 'danger',\r\n                        insert: 'bottom',\r\n                        container: 'bottom-right',\r\n                        animationIn: ['animated', 'fadeIn'],\r\n                        animationOut: ['animated', 'fadeOut'],\r\n                        dismiss: {\r\n                            duration: 5000,\r\n                            click: true,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n                    return;\r\n                }\r\n            })\r\n            .then(result => {\r\n                console.log(result);\r\n                if (result) {\r\n                    console.log(result);\r\n                    this.setState({\r\n                        karFhirServerURLList:result\r\n                    })\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    isEmpty(obj) {\r\n        for (var key in obj) {\r\n            if (obj.hasOwnProperty(key))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    handleRadioChange(e) {\r\n        this.setState({\r\n          authType: e.target.value\r\n        });\r\n    }\r\n\r\n    handleDirectChange(e) {\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            directType: e.target.value\r\n        });\r\n    }\r\n    handleReportChange(e) {\r\n        this.setState({\r\n            reportType: e.target.value\r\n        });\r\n    }\r\n\r\n    async handleKARChange(e){\r\n        let kARDetails = this.state.karFhirServerURLList.filter(x=> {\r\n            return x.id== e.target.value;\r\n        });\r\n        await this.setState({\r\n             karFhirServerURL: e.target.value,\r\n             isKarFhirServerURLSelected: true,\r\n             selectedKARDetails: kARDetails[0].kars_info\r\n        })\r\n    }\r\n\r\n    handleToggleButton(e) {\r\n        console.log(e);\r\n        console.log(e.target.value);\r\n        if (this.state.isChecked) {\r\n            this.setState({ isChecked: false, isLoggingEnabled: false });\r\n        } else {\r\n            this.setState({ isChecked: true, isLoggingEnabled: true });\r\n        }\r\n        console.log(this.state);\r\n    }\r\n\r\n    handleCheckboxChange(e,rowData){\r\n        console.log(e.target.checked);\r\n        console.log(rowData);\r\n    }\r\n\r\n    openHealthCareSettingsList() {\r\n        this.props.history.push('healthCareSettingsList');\r\n    }\r\n    openKAR(){\r\n        this.props.history.push('kar');\r\n    }\r\n\r\n    geturl() {\r\n        var protocol, context, host, strurl;\r\n        protocol = window.location.protocol;\r\n        host = window.location.host;\r\n        //port = window.location.port;\r\n        context = window.location.pathname.substring(0, window.location.pathname.indexOf(\"/\", 2));\r\n        strurl = protocol + \"//\" + host + context;\r\n        return strurl;\r\n    };\r\n\r\n    saveHealthCareSettings() {\r\n        console.log(\"clicked\");\r\n        console.log(this.state.xdrRecipientAddress);\r\n        var requestMethod = '';\r\n        var healthCareSettings = {\r\n            authType: this.state.authType,\r\n            clientId: this.state.clientId,\r\n            clientSecret: this.state.clientSecret && this.state.authType === 'SofSystem' ? this.state.clientSecret : null,\r\n            fhirServerBaseURL: this.state.fhirServerBaseURL,\r\n            tokenURL: this.state.tokenEndpoint ? this.state.tokenEndpoint : null,\r\n            scopes: this.state.scopes,\r\n            restAPIURL: this.state.restAPIURL ? this.state.restAPIURL : null,\r\n            encounterStartThreshold: this.state.startThreshold,\r\n            encounterEndThreshold: this.state.endThreshold,\r\n            lastUpdated:new Date()\r\n        };\r\n        if (!this.addNewHealthCare && this.selectedHealthCareSettings) {\r\n          healthCareSettings['id'] = this.selectedHealthCareSettings.id;\r\n            requestMethod = 'PUT';\r\n        } else {\r\n            requestMethod = 'POST';\r\n        }\r\n        console.log(this.geturl());\r\n        console.log(JSON.stringify(healthCareSettings));\r\n        // var serviceURL = this.geturl();\r\n        fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/healthcareSettings\", {\r\n            method: requestMethod,\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(healthCareSettings)\r\n        })\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    this.setState({\r\n                        isSaved: true\r\n                    });\r\n                    return response.json();\r\n                } else {\r\n                    const errorMessage = response.json();\r\n                    console.log(errorMessage);\r\n                    store.addNotification({\r\n                        title: '' + response.status + '',\r\n                        message: 'Error in Saving the HealthCare Settings',\r\n                        type: 'danger',\r\n                        insert: 'bottom',\r\n                        container: 'bottom-right',\r\n                        animationIn: ['animated', 'fadeIn'],\r\n                        animationOut: ['animated', 'fadeOut'],\r\n                        dismiss: {\r\n                            duration: 5000,\r\n                            click: true,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n                    return;\r\n                }\r\n            })\r\n            .then(result => {\r\n                console.log(result);\r\n                if (result) {\r\n                    this.setState({\r\n                        authType: \"SofProvider\",\r\n                        clientId: \"\",\r\n                        clientSecret: \"\",\r\n                        fhirServerBaseURL: \"\",\r\n                        tokenEndpoint: \"\",\r\n                        scopes: \"\",\r\n                        startThreshold: \"\",\r\n                        endThreshold: \"\",\r\n                        restAPIURL: \"\"\r\n                    });\r\n                    store.addNotification({\r\n                        title: 'Success',\r\n                        message: 'Client Details are saved successfully.',\r\n                        type: 'success',\r\n                        insert: 'bottom',\r\n                        container: 'bottom-right',\r\n                        animationIn: ['animated', 'fadeIn'],\r\n                        animationOut: ['animated', 'fadeOut'],\r\n                        dismiss: {\r\n                            duration: 5000,\r\n                            click: true,\r\n                            onScreen: true\r\n                        }\r\n                    });\r\n\r\n                    this.openHealthCareSettingsList();\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const setShow = () => this.setState({ isSaved: false });\r\n\r\n        const handleSubmit = (event) => {\r\n            const form = event.currentTarget;\r\n            if (form.checkValidity() === false) {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n            if (form.checkValidity() === true) {\r\n                this.saveHealthCareSettings();\r\n                this.setState({\r\n                    validated: true\r\n                });\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n            }\r\n\r\n        };\r\n        return (\r\n            <div className=\"healthCareSettings\">\r\n                <br />\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <h2>HealthCare Settings</h2>\r\n                    </Col>\r\n                    <Col md=\"3\" className=\"clientCol\">\r\n                        <Button onClick={this.openHealthCareSettingsList}>Existing HealthCareSettings</Button>\r\n                    </Col>\r\n                    <Col md=\"3\" className=\"clientCol\">\r\n                        <Button onClick={this.openKAR}>Knowledge Artifact Repository</Button>\r\n                    </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                    <Col>\r\n                        <Alert\r\n                            variant=\"success\"\r\n                            show={this.state.isSaved}\r\n                            onClose={() => setShow()}\r\n                            dismissible\r\n                        >\r\n                            HealthCare Settings are saved successfully.\r\n        </Alert>\r\n                        <Form noValidate validated={this.state.validated} onSubmit={handleSubmit} >\r\n                            <Accordion defaultActiveKey=\"0\">\r\n                                <Card className=\"accordionCards\">\r\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                                        FHIR Configuration\r\n                                    </Accordion.Toggle>\r\n                                    <Accordion.Collapse eventKey=\"0\">\r\n                                        <Card.Body className=\"fhirConfiguration\">\r\n                                            <Form.Group as={Row} controlId=\"formHorizontalClientId\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Launch Type:\r\n                                    </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Row>\r\n                                                        <Col sm={4}>\r\n                                                            <Form.Check type=\"radio\" id=\"providerLaunch\">\r\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.authType === 'SofProvider'} value=\"SofProvider\" name=\"authType\" onChange={e => this.handleRadioChange(e)} />\r\n                                                                <Form.Check.Label>Provider Launch</Form.Check.Label>\r\n                                                            </Form.Check>\r\n                                                        </Col>\r\n                                                        <Col sm={4}>\r\n                                                            <Form.Check type=\"radio\" id=\"systemLaunch\">\r\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.authType === 'SofSystem'} value=\"SofSystem\" onChange={e => this.handleRadioChange(e)} />\r\n                                                                <Form.Check.Label>System Launch</Form.Check.Label>\r\n                                                            </Form.Check>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Row} controlId=\"formHorizontalClientId\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Client Id:\r\n                                                </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control type=\"text\" placeholder=\"ClientId\" name=\"clientId\" required onChange={e => this.handleChange(e)} value={this.state.clientId} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        Please provide a Client Id.\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            {this.state.authType === 'SofSystem' ? (\r\n                                                <Form.Group as={Row} controlId=\"formHorizontalClientSecret\">\r\n                                                    <Form.Label column sm={2}>\r\n                                                        Client Secret:\r\n                                                    </Form.Label>\r\n                                                    <Col sm={10}>\r\n                                                        <Form.Control type=\"text\" placeholder=\"Client Secret\" name=\"clientSecret\" required={this.state.launchType === 'systemLaunch' ? true : false} onChange={e => this.handleChange(e)} value={this.state.clientSecret} />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            Please provide a Client Secret.\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Col>\r\n                                                </Form.Group>\r\n                                            ) : ''}\r\n\r\n                                            <Form.Group as={Row} controlId=\"formHorizontalScopes\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Scopes:\r\n                                                </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control as=\"textarea\" rows=\"3\" name=\"scopes\" onChange={e => this.handleChange(e)} required value={this.state.scopes} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        Please provide Scopes.\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"formHorizontalFHIRBaseURL\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    FHIR Server Base URL:\r\n                                                </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control type=\"text\" placeholder=\"FHIR Server Base URL\" name=\"fhirServerBaseURL\" required onChange={e => this.handleChange(e)} value={this.state.fhirServerBaseURL} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        Please provide a FHIR Server Base URL.\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            {this.state.authType === 'SofSystem' ? (\r\n                                                <Form.Group as={Row} controlId=\"formHorizontalTokenURL\">\r\n                                                    <Form.Label column sm={2}>\r\n                                                        Token Endpoint:\r\n                                                    </Form.Label>\r\n                                                    <Col sm={10}>\r\n                                                        <Form.Control type=\"text\" placeholder=\"Token Endpoint\" name=\"tokenEndpoint\" required={this.state.launchType === 'systemLaunch' ? true : false} onChange={e => this.handleChange(e)} value={this.state.tokenEndpoint} />\r\n\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            Please provide a FHIR Server Token URL.\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Col>\r\n                                                </Form.Group>\r\n                                            ) : ''} \r\n                                        </Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                <Card className=\"accordionCards\">\r\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n                                        Transport Configuration\r\n                                    </Accordion.Toggle>\r\n                                    <Accordion.Collapse eventKey=\"1\">\r\n                                        <Card.Body className=\"transportConfiguration\">\r\n                                                    <Form.Group as={Row} controlId=\"restAPIURL\">\r\n                                                        <Form.Label column sm={2}>\r\n                                                            Rest API URL:\r\n                                                        </Form.Label>\r\n                                                        <Col sm={10}>\r\n                                                            <Form.Control type=\"text\" placeholder=\"Rest API URL\" required={this.state.directType === 'restApi' ? true : false} name=\"restAPIURL\" onChange={e => this.handleChange(e)} value={this.state.restAPIURL} />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                Please provide Rest API URL.\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Col>\r\n                                                    </Form.Group>\r\n                                        </Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                <Card className=\"accordionCards\">\r\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"2\">\r\n                                        App Configuration\r\n                                    </Accordion.Toggle>\r\n                                    <Accordion.Collapse eventKey=\"2\">\r\n                                        <Card.Body className=\"appConfiguration\">\r\n\r\n                                            <Form.Group as={Row} controlId=\"startThreshold\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Encounter Start Time Threshold:\r\n                                                </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control type=\"text\" placeholder=\"Encounter Start Time Threshold\" required name=\"startThreshold\" onChange={e => this.handleChange(e)} value={this.state.startThreshold} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        Please provide a Encounter Start Time Threshold.\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group as={Row} controlId=\"endThreshold\">\r\n                                                <Form.Label column sm={2}>\r\n                                                    Encounter End Time Threshold:\r\n                                                </Form.Label>\r\n                                                <Col sm={10}>\r\n                                                    <Form.Control type=\"text\" placeholder=\"Encounter End Time Threshold\" required name=\"endThreshold\" onChange={e => this.handleChange(e)} value={this.state.endThreshold} />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        Please provide a Encounter End Time Threshold.\r\n                                                    </Form.Control.Feedback>\r\n                                                </Col>\r\n                                            </Form.Group>\r\n\r\n                                        </Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>\r\n                            \r\n                                {!this.addNewHealthCare?(\r\n                                <Card className=\"accordionCards\">\r\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"2\">\r\n                                        Knowledge Artifact Repository Configuration\r\n                                    </Accordion.Toggle>\r\n                                    <Accordion.Collapse eventKey=\"2\">\r\n                                        <Card.Body className=\"appConfiguration\">\r\n\r\n                                        <Form.Group as={Row} controlId=\"fhirServerURLPickList\">\r\n                                            <Form.Label column lg=\"3\">\r\n                                                Select FHIR Server URL:\r\n                                            </Form.Label>\r\n                                            <Col lg=\"9\">\r\n                                            <Form.Control as=\"select\" defaultValue=\"Select FHIR Server URL\" onChange={e=>this.handleKARChange(e)}>\r\n                                                <option>Select FHIR Server URL</option>\r\n                                                {this.state.karFhirServerURLList.map(option => (\r\n                                                    <option key={option.id} value={option.id}>\r\n                                                    {option.fhirServerURL}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </Form.Control>\r\n                                            </Col>\r\n                                            </Form.Group>\r\n\r\n                                            {this.state.isKarFhirServerURLSelected  ? (\r\n                                                <Row>\r\n                                                <Col>\r\n                                                    <Table responsive=\"lg\" striped bordered hover size=\"sm\">\r\n                                                        <tbody>\r\n                                                            <tr>\r\n                                                                <th></th>\r\n                                                                <th>PlanDefinitionId</th>\r\n                                                                <th>Name</th>\r\n                                                                <th>Publisher</th>\r\n                                                                <th>Version</th>\r\n                                                            </tr>\r\n                                                            {\r\n                                                                this.state.selectedKARDetails.map(get =>\r\n                                                                    <tr key={get.planDefinitionId}>\r\n                                                                        <td><Form.Check type=\"checkbox\" onChange={(e) => this.handleCheckboxChange(e, get.planDefinitionId)}/></td>\r\n                                                                        <td>{get.planDefinitionId}</td>\r\n                                                                        <td>{get.planDefinitionName}</td>\r\n                                                                        <td>{get.planDefinitionPublisher}</td>\r\n                                                                        <td>{get.planDefinitionVersion}</td>\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            }\r\n                                                        </tbody>\r\n                                                    </Table>\r\n                                                </Col>\r\n                                            </Row>\r\n                                                ):''}\r\n                                        </Card.Body>\r\n                                    </Accordion.Collapse>\r\n                                </Card>):''}\r\n                                \r\n                            </Accordion>\r\n                            <Row>\r\n                                <Col className=\"text-center\">\r\n                                    <Button type=\"submit\">Save</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                        {/* <Row>\r\n                            <Col className=\"text-center\">\r\n                                <button\r\n                                    className=\"btn btn-primary submitBtn\"\r\n                                    type=\"button\"\r\n                                    onClick={e => this.saveClientDetails(e)}\r\n                                >\r\n                                    Save\r\n                                </button>\r\n                            </Col>\r\n                        </Row> */}\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HealthCareSettings;\r\n","C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\HealthCareSettingsList\\HealthCareSettingsList.js",[],"C:\\XYRAMWorkspace\\Projects\\eCRNow\\eCRNow-UI\\eCRNow-UI\\src\\Views\\KAR\\KAR.js",["49","50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":10,"column":8,"nodeType":"58","messageId":"59","endLine":10,"endColumn":17},{"ruleId":"56","severity":1,"message":"60","line":11,"column":8,"nodeType":"58","messageId":"59","endLine":11,"endColumn":16},{"ruleId":"61","severity":1,"message":"62","line":136,"column":24,"nodeType":"63","messageId":"64","endLine":136,"endColumn":26},{"ruleId":"56","severity":1,"message":"65","line":6,"column":17,"nodeType":"58","messageId":"59","endLine":6,"endColumn":26},{"ruleId":"56","severity":1,"message":"66","line":6,"column":41,"nodeType":"58","messageId":"59","endLine":6,"endColumn":55},{"ruleId":"56","severity":1,"message":"67","line":172,"column":15,"nodeType":"58","messageId":"59","endLine":172,"endColumn":27},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","'MenuItem' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Accordion' is defined but never used.","'OverlayTrigger' is defined but never used.","'handleSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]